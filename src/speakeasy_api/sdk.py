"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .apiendpoints import APIEndpoints
from .apis import Apis
from .embeds import Embeds
from .metadata import Metadata
from .requests import Requests
from .schemas import Schemas
from .sdkconfiguration import SDKConfiguration
from speakeasy_api import utils
from speakeasy_api.models import shared
from typing import Dict

class SpeakeasyAPI:
    r"""Speakeasy API: The Speakeasy API allows teams to manage common operations with their APIs
    https://docs.speakeasyapi.dev - The Speakeasy Platform Documentation
    """
    api_endpoints: APIEndpoints
    r"""REST APIs for managing ApiEndpoint entities"""
    apis: Apis
    r"""REST APIs for managing Api entities"""
    embeds: Embeds
    r"""REST APIs for managing embeds"""
    metadata: Metadata
    r"""REST APIs for managing Version Metadata entities"""
    requests: Requests
    r"""REST APIs for retrieving request information"""
    schemas: Schemas
    r"""REST APIs for managing Schema entities"""

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 api_key: str,
                 server: str = None,
                 server_url: str = None,
                 url_params: Dict[str, str] = None,
                 client: requests_http.Session = None,
                 retry_config: utils.RetryConfig = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param api_key: The api_key required for authentication
        :type api_key: str
        :param server: The server by name to use for all operations
        :type server: str
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: Dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: utils.RetryConfig
        """
        if client is None:
            client = requests_http.Session()
        
        
        security_client = utils.configure_security_client(client, shared.Security(api_key = api_key))
        
        
        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(client, security_client, server_url, server, retry_config=retry_config)
       
        self._init_sdks()
    
    def _init_sdks(self):
        self.api_endpoints = APIEndpoints(self.sdk_configuration)
        self.apis = Apis(self.sdk_configuration)
        self.embeds = Embeds(self.sdk_configuration)
        self.metadata = Metadata(self.sdk_configuration)
        self.requests = Requests(self.sdk_configuration)
        self.schemas = Schemas(self.sdk_configuration)
    